{"version":3,"sources":["features/TextBox/TextBoxSlice.js","features/TextBox/Textbox.js","features/Tasks/Tasks.js","features/Images/imagesSlice.js","features/Quotes/QuotesSlice.js","features/Quotes/Quotes.js","features/Weather/WeatherSlice.js","features/Weather/Weather.js","App.js","serviceWorker.js","app/store.js","index.js"],"names":["textBoxSlize","createSlice","name","initialState","reducers","addText","state","action","push","payload","actions","selectText","texts","Textbox","useState","task","setTask","dispatch","useDispatch","id","onSubmit","e","preventDefault","type","placeholder","value","onChange","currentTarget","Tasks","isActive","setActive","currTasks","setTasks","taskDone","setTaskDone","tasks","useSelector","colors","toggleClass","index","useEffect","addTaskDone","includes","removeItem","itemToRemove","filter","item","map","i","length","color","splice","className","style","backgroundColor","opacity","onMouseEnter","onMouseLeave","onClick","loadImage","createAsyncThunk","a","link","fetch","data","json","imagesSlice","image","isLoading","hasError","extraReducers","pending","fulfilled","rejected","selectImage","addImage","loadQuotes","quotesSlice","quotes","selectQuotes","Quotes","quote","quotesArray","undefined","Math","floor","random","text","author","loadWeather","lat","long","weatherSlice","weather","selectWeather","Weather","description","icon","temp","country","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","main","sys","src","alt","App","currImg","setImg","imageArray","backgroundImage","urls","full","backgroundRepeat","backgroundSize","backgroundPosition","minHeight","currImgIndex","indexOf","Boolean","window","location","hostname","match","configureStore","reducer","textReducer","imageReducer","quoteReducer","weatherReducer","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f9ccdda.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const textBoxSlize = createSlice({\r\n    name: 'text',\r\n    initialState: ['Water Plants', 'Making spaget', 'Climb a V10', 'Make some beats'],\r\n    reducers: {\r\n        addText: (state, action) => {\r\n            state.push(action.payload);\r\n        }\r\n    }\r\n})\r\nexport const { addText } = textBoxSlize.actions;\r\nexport const selectText = state => state.texts;\r\nexport default textBoxSlize.reducer;","import React, { useState } from 'react';\r\nimport './Textbox.css';\r\nimport { addText } from './TextBoxSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function Textbox() {\r\n    const [task, setTask] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    const handleTaskSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(addText(task))\r\n        setTask(\"\")\r\n    }\r\n\r\n    return (\r\n        <div id='textbox'>\r\n            <h1 id='question'>What's on your mind today?</h1>\r\n            <form onSubmit={handleTaskSubmit}>\r\n            <input id='text-input' type='text' placeholder='Enter your thoughts here' value={task} \r\n                 onChange={(e) => setTask(e.currentTarget.value)}\r\n            />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport './Tasks.css';\r\nimport { selectText } from '../TextBox/TextBoxSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Tasks() {\r\n    const [isActive, setActive] = useState(null);\r\n    const [currTasks, setTasks] = useState(null);\r\n    const [taskDone, setTaskDone] = useState([]);\r\n    const tasks = useSelector(selectText);\r\n    let colors = ['#457b9d',  '#e63946', '#588157', '#f77f00'];\r\n\r\n    const toggleClass = (index) => {\r\n        setActive((isActive) => (isActive === index ? null : index));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTasks(tasks)\r\n    },[tasks])\r\n\r\n\r\n    const addTaskDone = (e) => {\r\n        e.preventDefault();\r\n        if(!taskDone.includes(isActive)) {\r\n            setTaskDone([...taskDone, isActive])\r\n        }\r\n    }\r\n\r\n    const removeItem = (e) => {\r\n        e.preventDefault();\r\n        const itemToRemove = tasks[isActive]\r\n        setTasks(currTasks.filter(item => item !== itemToRemove));    \r\n    }\r\n\r\n    return (\r\n        <div id='task-container'>\r\n            {\r\n                currTasks !== null ? \r\n                currTasks.map((task, i) => {\r\n                    if(colors.length === 0) {\r\n                        colors =  ['#457b9d',  '#e63946', '#588157', '#f77f00'];\r\n                    }\r\n                    const color = colors.splice(0,1);\r\n                    return (\r\n                        <div \r\n                        key={i}\r\n                        className='task'\r\n                        style={taskDone.includes(i) ? {backgroundColor: color[0], opacity: 0.4}:{backgroundColor: color[0]}}\r\n                        onMouseEnter={() => toggleClass(i)}\r\n                        onMouseLeave={() => toggleClass(i)}\r\n                        >\r\n                        {task}\r\n                        <div className={ isActive === i ? 'buttonsOn' : 'off'}>\r\n                            <button className='done btn' onClick={addTaskDone}>Done</button>\r\n                            <button className='remove btn' onClick={removeItem}>Remove</button>\r\n                        </div>\r\n                        </div>\r\n                    )\r\n                }) : ''\r\n            }\r\n        </div>\r\n    )\r\n}","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const loadImage = createAsyncThunk(\r\n    \"image/getImage\",\r\n    async() => {\r\n        const apiKey = 'JbY5DkAIxjXte_atw6NxtH6pjyctS66c6XUZPflK74Q';\r\n        const link = `https://api.unsplash.com/photos/?client_id=${apiKey}`;\r\n        const data = await fetch(link);\r\n        const json = await data.json();\r\n        return json;\r\n    }\r\n)\r\n\r\nexport const imagesSlice = createSlice({\r\n    name: 'image',\r\n    initialState: {\r\n        image: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [loadImage.pending]: (state) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadImage.fulfilled]: (state, action) => {\r\n            state.image.push(action.payload)\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n        },\r\n        [loadImage.rejected]: (state) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addImage} = imagesSlice.actions; \r\nexport const selectImage = state => state.image.image\r\nexport default imagesSlice.reducer;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const loadQuotes = createAsyncThunk(\r\n    'quotes/getQuotes',\r\n    async() => {\r\n        const apiLink = 'https://type.fit/api/quotes';\r\n        const data = await fetch(apiLink);\r\n        const json = await data.json();\r\n        return json;\r\n    }\r\n);\r\n\r\nexport const quotesSlice = createSlice({\r\n    name: 'quotes',\r\n    initialState: {\r\n        quotes: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [loadQuotes.pending]: (state) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadQuotes.fulfilled]: (state, action) => {\r\n            state.quotes.push(action.payload);\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n        },\r\n        [loadQuotes.rejected]: (state) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n    }\r\n})\r\n\r\nexport const selectQuotes = state => state.quotes.quotes;\r\nexport default quotesSlice.reducer;","import React, { useEffect} from 'react';\r\nimport { selectQuotes, loadQuotes } from './QuotesSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './Quotes.css';\r\n\r\nexport function Quotes() {\r\n    const dispatch = useDispatch();\r\n    const quotes = useSelector(selectQuotes);\r\n    const quotesArray = quotes[0];\r\n    let quote;\r\n\r\n    useEffect(() => {\r\n        dispatch(loadQuotes());\r\n    }, [dispatch])\r\n\r\n    if(quotesArray !== undefined) {\r\n        quote = quotesArray[Math.floor(Math.random()*quotesArray.length)];\r\n    }\r\n    return (\r\n        <div className='quote-container'>\r\n            <h3>\"{quote !== undefined ? quote.text : ''}\"</h3>\r\n            <h4>-{quote !== undefined ? quote.author : ''}</h4>\r\n        </div>\r\n    )\r\n}","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const loadWeather = createAsyncThunk(\r\n    \"weather/loadWeather\",\r\n    async({lat, long}) => {\r\n        const link = `https://community-open-weather-map.p.rapidapi.com/weather?lat=${lat}&lon=${long}&units=metric`;\r\n        const data = await fetch(link, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"c745030bd5msh840be0eeb1d3a7dp161562jsn29910ef0bba7\"\r\n            }\r\n        });\r\n        const json = await data.json();\r\n        return json;\r\n    }\r\n);\r\n\r\nexport const weatherSlice = createSlice({\r\n    name: 'weather',\r\n    initialState: {\r\n        weather: [],\r\n        isLoading: false,\r\n        hasError: false,\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [loadWeather.pending]: (state) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadWeather.fulfilled]: (state, action) => {\r\n            state.weather.push(action.payload);\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n        },\r\n        [loadWeather.rejected]: (state) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n    }\r\n});\r\n\r\nexport default weatherSlice.reducer;\r\nexport const selectWeather = state => state.weather.weather;","import React, { useEffect } from 'react';\r\nimport { loadWeather, selectWeather } from './WeatherSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './Weather.css';\r\n\r\nexport function Weather() {\r\n    const weather = useSelector(selectWeather)\r\n    const dispatch = useDispatch();\r\n    let description, icon, temp, country, name;\r\n\r\n    useEffect(() => {\r\n        if(navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                dispatch(loadWeather({lat: position.coords.latitude, long: position.coords.longitude}));\r\n        })\r\n    }\r\n    },[dispatch])\r\n    if (weather[0] !== undefined && weather !== undefined) {\r\n        icon = weather[0].weather[0].icon;\r\n        description = weather[0].weather[0].description;\r\n        temp = weather[0].main.temp;\r\n        country = weather[0].sys.country;\r\n        name = weather[0].name;\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n            icon !== undefined ?\r\n            <div className='weather-container'>\r\n                <div className='temp-icon'>\r\n                    <img src={`https://openweathermap.org/img/wn/${icon}.png`} alt='icon'/> \r\n                    <h4>{temp}°C</h4> \r\n                </div>\r\n                <h4>{description}</h4>\r\n                <h4>{country}, {name}</h4> \r\n            </div> \r\n            : null\r\n            }    \r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport { Textbox } from './features/TextBox/Textbox';\nimport { Tasks } from './features/Tasks/Tasks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectImage, loadImage } from './features/Images/imagesSlice';\nimport { Quotes } from './features/Quotes/Quotes';\nimport { Weather } from './features/Weather/Weather';\n\nfunction App() {\n  const [currImg, setImg] = useState('')\n  const dispatch = useDispatch();\n  const getImage = useSelector(selectImage);\n  const imageArray = getImage[0];\n\n  useEffect(() => {\n    dispatch(loadImage());\n  }, [dispatch])\n\n  if(imageArray !== undefined && currImg === '') {\n    setImg(imageArray[Math.floor(Math.random()*imageArray.length)]);\n  }\n\n  const nextPicture = (e) => {\n    e.preventDefault();\n    const currImgIndex = imageArray.indexOf(currImg);\n    if(currImgIndex < 9) {\n      setImg(imageArray[currImgIndex+1])\n    }\n  }\n\n  const previousPicture = (e) => {\n    e.preventDefault();\n    const currImgIndex = imageArray.indexOf(currImg);\n    if(currImgIndex > 0) {\n      setImg(imageArray[currImgIndex-1])\n    }\n  }\n\n  return (\n    <div className=\"App\" style={ \n      currImg !== ''? \n      {\n        backgroundImage: `url(${currImg.urls.full})`, backgroundRepeat: 'no-repeat', backgroundSize: 'cover', \n        backgroundPosition: 'center', minHeight: '100vh'\n      } \n    : {backgroundColor : \"#000\"}\n    }>\n      <Weather />\n      <div id='main-boxes'>\n        <Textbox />\n        <Tasks />\n      </div>\n      <div className='btn-container'>\n        <button className='left-btn' onClick={previousPicture}>&lt;</button>\n        <button className='right-btn' onClick={nextPicture}>&gt;</button>\n      </div>\n      <Quotes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport textReducer from '../features/TextBox/TextBoxSlice';\r\nimport imageReducer from '../features/Images/imagesSlice';\r\nimport quoteReducer from '../features/Quotes/QuotesSlice';\r\nimport weatherReducer from '../features//Weather/WeatherSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        texts: textReducer,\r\n        image: imageReducer,\r\n        quotes: quoteReducer,\r\n        weather: weatherReducer\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}